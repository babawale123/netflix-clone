{"version":3,"sources":["axios.js","Request.js","Banner.js","Nav.js","Row.js","Screens/HomeScreen.js","firebase.js","Screens/SignupScreen.js","Screens/LoginScreen.js","features/userSlice.js","Screens/ProfileScreen.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["instance","axios","create","baseURL","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","string","n","useState","movie","setMovie","useEffect","a","get","request","data","results","Math","floor","random","length","fetchData","console","log","className","style","backgroundSize","backgroundImage","backdrop_path","backgroundPosition","title","name","original_name","overview","substr","Nav","show","handleShow","transitionNavBar","window","scrollY","addEventListener","removeEventListener","to","src","alt","Row","fetchUrl","isLargeRow","movies","setMovies","trailerUrl","setTrailerUrl","map","onClick","movieTrailer","then","url","urlParams","URLSearchParams","URL","search","catch","error","handleClick","poster_path","id","videoId","opts","height","width","playerVars","autoplay","HomeScreen","firebaseapp","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","firestore","SignupScreen","emailRef","useRef","passwordRef","ref","type","placeholder","e","preventDefault","signInWithEmailAndPassword","current","value","authUser","alert","message","createUserWithEmailAndPassword","LoginScreen","signUp","setSignUp","userSlice","createSlice","initialState","user","reducers","login","state","action","payload","logout","actions","selectUser","ProfileScreen","useSelector","email","signOut","App","dispatch","useDispatch","onAuthStateChanged","userAuth","uid","path","exact","store","configureStore","reducer","userReducer","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.72285273.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL:\"https://api.themoviedb.org/3\"\r\n});\r\n\r\nexport default instance","const API_KEY = \"374125a97beed82386bb7d614c752abc\";\r\n\r\nconst  requests = {\r\n    fetchTrending:`/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n    fetchNetflixOriginals:`/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n    fetchTopRated:`/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n    fetchActionMovies:`/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n    fetchComedyMovies:`/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n    fetchHorrorMovies:`/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n    fetchRomanceMovies:`/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n    fetchDocumentaries:`/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n\r\n    \r\n};\r\n\r\nexport default requests;","import React, { useEffect, useState } from 'react';\r\nimport './Banner.css';\r\nimport axios from './axios';\r\nimport requests from './Request';\r\n\r\nfunction Banner() {\r\n    const [movie, setMovie] = useState([]);\r\n\r\n    useEffect(() => {\r\n       async function fetchData() {\r\n           const request = await axios.get(requests.fetchNetflixOriginals);\r\n           setMovie(\r\n               request.data.results[\r\n                 Math.floor(Math.random() * request.data.results.length - 1) \r\n               ]\r\n           );\r\n           return request; \r\n       } \r\n\r\n       fetchData();\r\n        \r\n    }, []);\r\n\r\n    console.log(movie);\r\n\r\n\r\n    function truncate(string, n){\r\n        return string?.length > n ? string.substr(0, n-1) + '....' : string;\r\n    }\r\n    return (\r\n        <header className=\"banner\" style={{\r\n            backgroundSize:\"cover\",\r\n            backgroundImage:`url('https://image.tmdb.org/t/p/original/${movie?.backdrop_path}')`,\r\n            backgroundPosition:\"center center\",\r\n            }}>\r\n            \r\n            <div className=\"banner__contents\">\r\n                <h1 className=\"banner__title\">{movie?.title || movie?.name || movie?.original_name}</h1>\r\n                <div className=\"banner__buttons\">\r\n                    <button className=\"banner__button\">Play</button>\r\n                    <button className=\"banner__button\">My List</button>\r\n                </div>\r\n                <h1 className=\"banner__description\">{truncate(movie?.overview, 150)}\r\n                </h1>\r\n\r\n\r\n            </div>\r\n            <div className=\"banner--fadeBottom\" />\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Banner\r\n","import React, { useEffect, useState } from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport './Nav.css'\r\n\r\nfunction Nav() {\r\n    const [show, handleShow] = useState(false); \r\n   // const history = useHistory()\r\n\r\n    const transitionNavBar = () =>{\r\n        if(window.scrollY > 100){\r\n            handleShow(true);\r\n        }else{\r\n            handleShow(false)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n       window.addEventListener(\"scroll\", transitionNavBar);\r\n        return () => window.removeEventListener(\"scroll\",transitionNavBar);\r\n    }, [])\r\n    return (\r\n        <div className={`nav ${show && \"nav__black\"}`}>\r\n            <div className=\"nav__contents\">\r\n                <Link to=\"/\">\r\n                <img\r\n                //onClick={()=> history.push(\"/\")}\r\n                className=\"nav__logo\"\r\n                src=\"https://www.freepnglogos.com/uploads/netflix-logo-0.png\"\r\n                alt=\"\"\r\n                />\r\n                 </Link>\r\n                 <Link to=\"/profile\">\r\n                    <img\r\n                    //onClick={()=> history.push(\"/profile\")}\r\n                    className=\"nav__avatar\"\r\n                    src=\"https://upload.wikimedia.org/wikipedia/commons/0/0b/Netflix-avatar.png\"\r\n                    alt=\" \"\r\n                    />\r\n                 </Link>\r\n                          \r\n                \r\n            </div>\r\n           \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Nav\r\n","import React, { useEffect, useState } from 'react';\r\nimport './Row.css';\r\nimport axios from './axios';\r\nimport YouTube from 'react-youtube';\r\nimport movieTrailer from 'movie-trailer';\r\n\r\nfunction Row({title,fetchUrl,isLargeRow = false}) {\r\n    const [movies, setMovies] = useState([]);\r\n    const [trailerUrl, setTrailerUrl] = useState(\"\");\r\n\r\n    const base_Url = \"https://image.tmdb.org/t/p/original/\"\r\n\r\n\r\n    useEffect(()=>{\r\n        async function fetchData(){\r\n            const request = await axios.get(fetchUrl);\r\n            setMovies(request.data.results)\r\n        }\r\n        fetchData();\r\n    },[fetchUrl]);\r\n\r\n    const opts = {\r\n        height:\"390\",\r\n        width:\"100%\",\r\n        playerVars: {\r\n            autoplay:1,\r\n        },\r\n    };\r\n\r\n    const handleClick = (movie) => {\r\n       if(trailerUrl){\r\n           setTrailerUrl('');\r\n       } \r\n       else {\r\n           movieTrailer(movie?.name || \"\")\r\n           .then((url) => {\r\n                const urlParams = new URLSearchParams(new URL(url).search);\r\n                setTrailerUrl(urlParams.get('v'));\r\n           })\r\n           .catch((error)=>console.log(error));\r\n       }\r\n    }\r\n    return (\r\n        <div className='row'>\r\n            <h2>{title}</h2>\r\n\r\n            <div className=\"row__posters\">\r\n                {movies.map((movie) =>(\r\n                    <img\r\n                    onClick={()=>handleClick(movie)}\r\n                    className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\r\n                    key={movie.id}\r\n                    src={`${base_Url}${\r\n                        isLargeRow ? movie.poster_path : movie.backdrop_path\r\n                    }`} alt={movie.name} />\r\n                ))}\r\n            </div>\r\n            {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\r\n           \r\n        </div> \r\n    );\r\n}\r\n\r\nexport default Row\r\n","import React from 'react'\r\nimport Banner from '../Banner'\r\nimport './HomeScreen.css'\r\nimport Nav from '../Nav'\r\nimport requests from '../Request'\r\nimport Row from '../Row'\r\n\r\nfunction HomeScreen() {\r\n    return (\r\n        <div className=\"homeScreen\">\r\n           <Nav />\r\n            \r\n            <Banner />\r\n            <Row  \r\n            title='NETFLIX ORIGINAL'\r\n            fetchUrl={requests.fetchNetflixOriginals}\r\n            isLargeRow\r\n            /> \r\n\r\n             <Row  \r\n            title='Trending Now'\r\n            fetchUrl={requests.fetchTrending}\r\n            name= {requests.fetchTrending.name}\r\n            /> \r\n\r\n            <Row  \r\n            title='Top Rated'\r\n            fetchUrl={requests.fetchTopRated}\r\n            /> \r\n\r\n            <Row  \r\n            title='Action Movies'\r\n            fetchUrl={requests.fetchActionMovies}\r\n            /> \r\n\r\n            <Row  \r\n            title='Comedy Movies'\r\n            fetchUrl={requests.fetchComedyMovies}\r\n            /> \r\n\r\n            <Row  \r\n            title='Horro Movies'\r\n            fetchUrl={requests.fetchHorrorMovies}\r\n            /> \r\n\r\n            <Row  \r\n            title='Romance Movies'\r\n            fetchUrl={requests.fetchRomanceMovies}\r\n            /> \r\n\r\n            <Row  \r\n            title='Documentaries'\r\n            fetchUrl={requests.fetchDocumentaries}\r\n            /> \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HomeScreen\r\n","import firebase from 'firebase';\r\n\r\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyCFNjEoxNEKICg7Ewk0kWnda1zDENJDtPE\",\r\n  authDomain: \"netflick-clone.firebaseapp.com\",\r\n  projectId: \"netflick-clone\",\r\n  storageBucket: \"netflick-clone.appspot.com\",\r\n  messagingSenderId: \"928375820225\",\r\n  appId: \"1:928375820225:web:ae7ad148eb9ea648d22940\",\r\n  measurementId: \"G-24T34YDB2R\"\r\n};\r\n\r\n  const firebaseapp = firebase.initializeApp(firebaseConfig);\r\n  const db = firebaseapp.firestore();\r\n  const auth = firebaseapp.auth();\r\n\r\n  export { auth };\r\n  export default db;","import React, { useRef } from 'react';\r\nimport { auth } from '../firebase';\r\nimport './SignupScreen.css';\r\n\r\nconst SignupScreen = () => {\r\n    const emailRef = useRef(null);\r\n    const passwordRef = useRef(null)\r\n\r\n    const register = (e) =>{\r\n        e.preventDefault();\r\n        auth.createUserWithEmailAndPassword(\r\n            emailRef.current.value,\r\n            passwordRef.current.value\r\n        ).then((authUser)=>{\r\n            console.log(authUser);\r\n        }).catch((error)=>{\r\n            alert(error.message);\r\n        });\r\n    }\r\n\r\n    const signIn = (e) => {\r\n        e.preventDefault();\r\n        auth.signInWithEmailAndPassword(\r\n            emailRef.current.value,\r\n            passwordRef.current.value,\r\n        ).then((authUser) =>{\r\n            console.log(authUser);\r\n        }).catch((error)=>{alert(error.message)}\r\n            );\r\n    }\r\n    return (\r\n        <div className=\"signupScreen\">\r\n            <form>\r\n                <h1>Sign In</h1>\r\n                <input ref={emailRef} type=\"email\" placeholder=\"Email\" />\r\n                <input ref={passwordRef} type=\"password\" placeholder=\"Password\" />\r\n                <button type=\"submit\" onClick={signIn}>Sign In</button>\r\n                <h4> <span className=\"signupScreen__gray\">New to Netflick? </span> \r\n                   <span className=\"signupScreen__link\" onClick={register}>Sign Up now.</span> \r\n                </h4>\r\n            </form>            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SignupScreen\r\n","import React, { useState } from 'react';\r\nimport './LoginScreen.css';\r\nimport SignupScreen from './SignupScreen';\r\n\r\nconst LoginScreen = () => {\r\n    const [signUp, setSignUp] = useState(false);\r\n    return (\r\n        <div className=\"loginScreen\">\r\n           <div className=\"loginScreen__background\">\r\n               <img\r\n                className=\"loginScreen__logo\"\r\n                src=\"http://assets.stickpng.com/images/580b57fcd9996e24bc43c529.png\" alt=\"\" />\r\n                <button onClick={()=>setSignUp(true)} className=\"loginScreen__button\">\r\n                    Sign in\r\n                </button>\r\n                <div className=\"loginScreen__gradient\" />\r\n             </div>\r\n                <div className=\"loginScreen__body\">\r\n                    {signUp ? (\r\n                        <SignupScreen />\r\n                    ) : (\r\n                        <>\r\n                        <h1>Unlimited films, Tv programmes and more</h1>\r\n                        <h2>Watch anywhere. Cancel at any time</h2>\r\n                        <h3>Ready to Watch? Enter your email create or restart your membership</h3>\r\n                        <div className=\"loginScreen__input\">\r\n                            <form>\r\n                                <input type=\"email\" placeholder=\"Email Address\" />\r\n                                <button \r\n                                onClick={()=>setSignUp(true)}\r\n                                className=\"loginScreen__getStarted\">GET STARTED</button>\r\n                                \r\n                            </form>\r\n                        </div>\r\n                    </> \r\n                    )}\r\n                    \r\n                </div> \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LoginScreen\r\n","import {  createSlice } from '@reduxjs/toolkit';\n\n\nexport const userSlice = createSlice({\n  name: 'user',\n  initialState: {\n      user:null,\n  },\n  reducers: {\n    login: (state, action) => {\n        state.user = action.payload;\n    },\n    logout: (state) => {\n        state.user = null;\n    }\n  },\n  \n});\n\nexport const { login, logout } = userSlice.actions;\n\n\nexport const selectUser = state => state.user.user;\n \n \n\nexport default userSlice.reducer;\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { selectUser } from '../features/userSlice';\r\nimport { auth } from '../firebase';\r\nimport Nav from '../Nav';\r\nimport './ProfileScreen.css';\r\n\r\nconst ProfileScreen = () => {\r\n    const user = useSelector(selectUser)\r\n    return (\r\n        <div className=\"profileScreen\">\r\n            <Nav />\r\n            \r\n            <div className=\"profileScreen__body\">\r\n             <h1>Edit Profile</h1> \r\n             <div className=\"profileScreen__info\">\r\n                 <img\r\n                 src=\"https://upload.wikimedia.org/wikipedia/commons/0/0b/Netflix-avatar.png\"\r\n                 alt=\"\"\r\n                 />\r\n                 <div className=\"profileScreen__details\">\r\n                    <h2>{user.email}</h2>\r\n                    <div className=\"profileScreen__plans\">\r\n                        <h3>Plans</h3>\r\n                        <button onClick={()=>auth.signOut()} className='profileScreen__signOut'>Sign Out</button>\r\n                    </div>\r\n                 </div>\r\n             </div> \r\n            </div>\r\n        </div>\r\n    )\r\n} \r\n\r\nexport default ProfileScreen\r\n","import React, { useEffect } from 'react';\nimport HomeScreen from './Screens/HomeScreen';\nimport './App.css';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route  \n} from \"react-router-dom\";\nimport LoginScreen from './Screens/LoginScreen';\nimport { auth } from './firebase';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { login, logout, selectUser } from './features/userSlice';\nimport ProfileScreen from './Screens/ProfileScreen';\n\nfunction App() {\n\n  const user = useSelector(selectUser);\n  const  dispatch = useDispatch();\n\n  useEffect(()=>{\n    const unsubscribe = auth.onAuthStateChanged((userAuth) =>{\n      if(userAuth){\n        dispatch(\n            login({\n            uid:userAuth.uid,\n            email:userAuth.email,\n            })\n        );\n      }\n      else {\n        dispatch(logout());\n      }\n    });\n    return unsubscribe;\n  },[dispatch]);\n\n  return ( \n    <div className=\"app\">\n      <Router>\n        {!user ? (\n          <LoginScreen />\n        ) : (\n          <Switch>\n            <Route path=\"/profile\">\n             <ProfileScreen />\n            </Route>\n          <Route>\n            <HomeScreen exact path=\"/\" />\n          </Route>\n        </Switch>\n        )}\n       \n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\nimport userReducer from '../features/userSlice';\n\nexport const store = configureStore({\n  reducer: {\n    user: userReducer,\n  },\n});\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  \n    <Provider store={store}>\n      <App />\n    </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}